(module
  ()
  (def K_combinator (u)
    (pi A imp (sort (univvar u))
      (pi B imp (sort (univvar u))
        (pi x ex (bound 1)
          (pi x ex (bound 1)
            (bound 3))
    )))
    (lam A imp (sort (univvar u))
      (lam B imp (sort (univvar u))
        (lam x ex (bound 1)
          (lam x ex (bound 1)
            (bound 1))
    )))
  )
  (def I_combinator_from_K (u)
    (pi T imp (sort (univvar u))
      (pi x ex (bound 0)
        (bound 1)))
    (lam T imp (sort (univvar u))
      (lam x ex (bound 0)
        (ap (ap (ap (ap
          (inst (test test K_combinator) ((univvar u)))
          (bound 1))
          (bound 1))
          (bound 0))
          (bound 0))
    ))
  )
  (ind Punit () (u) (sort (univvar u)) 0 (
    (star (inst (test test Punit) ((univvar u))))
  ))
  (ind True () () (sort (univzero)) 0 (
    (True.intro (inst (test test True) ()))
  ))
  (ind False () () (sort (univzero)) 0 ())
  (ind Empty () () (sort (univsucc (univzero))) 0 ())
  (ind Eq () (u)
    (pi A imp (sort (univvar u))
      (pi a ex (bound 0)
        (pi b ex (bound 1)
          (sort (univzero)))))
    2 (
    (Eq.refl (pi A imp (sort (univvar u))
      (pi a ex (bound 0)
        (ap (ap (ap (inst (test test Eq) ((univvar u)))
          (bound 1))
          (bound 0))
          (bound 0)))
    ))
  ))
  (ind Heq () (u)
    (pi A imp (sort (univvar u))
      (pi a ex (bound 0)
        (pi B imp (sort (univvar u))
          (pi b ex (bound 0)
            (sort (univzero))))))
    2 (
    (Heq.refl (pi A imp (sort (univvar u))
      (pi a ex (bound 0)
        (ap (ap (ap (ap (inst (test test Heq) ((univvar u)))
          (bound 1))
          (bound 0))
          (bound 1))
          (bound 0)))
    ))
  ))
  (ind Prod () (u v)
    (pi A ex (sort (univsucc (univvar u)))
      (pi B ex (sort (univsucc (univvar u)))
        (sort (univsucc (univmax (univvar u) (univvar v))))))
    2 (
    (Prod.mk (pi A imp (sort (univsucc (univvar u)))
      (pi B imp (sort (univsucc (univvar u)))
        (pi fst ex (bound 1)
          (pi snd ex (bound 1)
            (ap (ap (inst (test test Prod) ((univvar u) (univvar v)))
              (bound 3))
              (bound 2))
      )))))
  ))
  (ind PProd () (u v)
    (pi A ex (sort (univvar u))
      (pi B ex (sort (univvar u))
        (sort (univmax (univsucc (univzero)) (univmax (univvar u) (univvar v))))))
    2 (
    (PProd.mk (pi A imp (sort (univvar u))
      (pi B imp (sort (univvar u))
        (pi fst ex (bound 1)
          (pi snd ex (bound 1)
            (ap (ap (inst (test test PProd) ((univvar u) (univvar v)))
              (bound 3))
              (bound 2))
      )))))
  ))
  (ind And () ()
    (pi A ex (sort (univzero))
      (pi B ex (sort (univzero))
        (sort (univzero))))
    2 (
    (And.mk (pi A imp (sort (univzero))
      (pi B imp (sort (univzero))
        (pi left ex (bound 1)
          (pi right ex (bound 1)
            (ap (ap (inst (test test And) ())
              (bound 3))
              (bound 2))
      )))))
  ))
  (ind Sum () (u v)
    (pi A ex (sort (univsucc (univvar u)))
      (pi B ex (sort (univsucc (univvar u)))
        (sort (univsucc (univmax (univvar u) (univvar v))))))
    2 (
    (Sum.inl (pi A imp (sort (univsucc (univvar u)))
      (pi B imp (sort (univsucc (univvar u)))
        (pi a ex (bound 1)
          (ap (ap (inst (test test Sum) ((univvar u) (univvar v)))
            (bound 2))
            (bound 1))
      ))))
    (Sum.inr (pi A imp (sort (univsucc (univvar u)))
      (pi B imp (sort (univsucc (univvar u)))
        (pi b ex (bound 0)
          (ap (ap (inst (test test Sum) ((univvar u) (univvar v)))
            (bound 2))
            (bound 1))
      ))))
  ))
  (ind PSum () (u v)
    (pi A ex (sort (univvar u))
      (pi B ex (sort (univvar u))
        (sort (univmax (univsucc (univzero)) (univmax (univvar u) (univvar v))))))
    2 (
    (PSum.inl (pi A imp (sort (univvar u))
      (pi B imp (sort (univvar u))
        (pi a ex (bound 1)
          (ap (ap (inst (test test PSum) ((univvar u) (univvar v)))
            (bound 2))
            (bound 1))
      ))))
    (PSum.inr (pi A imp (sort (univvar u))
      (pi B imp (sort (univvar u))
        (pi b ex (bound 0)
          (ap (ap (inst (test test PSum) ((univvar u) (univvar v)))
            (bound 2))
            (bound 1))
      ))))
  ))
  (ind Or () ()
    (pi A ex (sort (univzero))
      (pi B ex (sort (univzero))
        (sort (univzero))))
    2 (
    (Or.inl (pi A imp (sort (univzero))
      (pi B imp (sort (univzero))
        (pi a ex (bound 1)
          (ap (ap (inst (test test Or) ())
            (bound 2))
            (bound 1))
      ))))
    (Or.inr (pi A imp (sort (univzero))
      (pi B imp (sort (univzero))
        (pi b ex (bound 0)
          (ap (ap (inst (test test Or) ())
            (bound 2))
            (bound 1))
      ))))
  ))
  (ind Sigma () (u v)
    (pi A imp (sort (univsucc (univvar u)))
      (pi B ex (pi a ex (bound 0) (sort (univsucc (univvar v))))
        (sort (univmax (univsucc (univvar u)) (univsucc (univvar v))))))
    2 (
    (Sigma.mk (pi A imp (sort (univsucc (univvar u)))
      (pi B ex (pi a ex (bound 0) (sort (univsucc (univvar v))))
        (pi fst ex (bound 1)
          (pi snd ex (ap (bound 1) (bound 0))
            (ap (ap (inst (test test Sigma) ((univvar u) (univvar v)))
              (bound 3))
              (bound 2))
      )))
    ))
  ))
  (ind PSigma () (u v)
    (pi A imp (sort (univvar u))
      (pi B ex (pi a ex (bound 0) (sort (univvar v)))
        (sort (univmax (univsucc (univzero)) (univmax (univvar u) (univvar v))))))
    2 (
    (PSigma.mk (pi A imp (sort (univvar u))
      (pi B ex (pi a ex (bound 0) (sort (univvar v)))
        (pi fst ex (bound 1)
          (pi snd ex (ap (bound 1) (bound 0))
            (ap (ap (inst (test test PSigma) ((univvar u) (univvar v)))
              (bound 3))
              (bound 2))
      )))
    ))
  ))
  (ind Bool () ()
    (sort (univsucc (univzero)))
    0 (
    (false (inst (test test Bool) ()))
    (true (inst (test test Bool) ()))
  ))
  (ind Subtype () (u)
    (pi A imp (sort (univvar u))
      (pi p ex (pi a ex (bound 0) (sort (univzero)))
        (sort (univmax (univsucc (univzero)) (univvar u)))))
    2 (
    (Subtype.mk
      (pi A imp (sort (univvar u))
        (pi p ex (pi a ex (bound 0) (sort (univzero)))
          (pi val ex (bound 1)
            (pi property ex (ap (bound 1) (bound 0))
              (ap (ap (inst (test test Subtype) ((univvar u)))
                (bound 3))
                (bound 2))
      )))))
  ))
  (ind PGame () (u)
    (sort (univsucc (univsucc (univvar u))))
    0 (
    (PGame.mk
      (pi A ex (sort (univsucc (univvar u)))
        (pi B ex (sort (univsucc (univvar u)))
          (pi left ex
            (pi a ex (bound 1) (inst (test test PGame) ((univvar u))))
            (pi right ex
              (pi b ex (bound 1) (inst (test test PGame) ((univvar u))))
              (inst (test test PGame) ((univvar u)))
            )))))
  ))
  (ind W () (u v)
    (pi A ex (sort (univsucc (univvar u)))
      (pi B ex (pi a ex (bound 0) (sort (univsucc (univvar v))))
        (sort (univmax (univsucc (univvar u)) (univsucc (univvar v))))))
    2 (
    (W.mk
      (pi A ex (sort (univsucc (univvar u)))
        (pi B ex (pi a ex (bound 0) (sort (univsucc (univvar v))))
          (pi a ex (bound 1)
            (pi b ex (pi c ex
              (ap (bound 1) (bound 0))
              (ap (ap (inst (test test W) ((univvar u) (univvar v)))
                (bound 3))
                (bound 2)))
              (ap (ap (inst (test test W) ((univvar u) (univvar v)))
                (bound 3))
                (bound 2)))
            ))))
  ))
  (ind Nat () ()
    (sort (univsucc (univzero)))
    0 (
    (Nat.zero (inst (test test Nat) ()))
    (Nat.succ (pi k ex (inst (test test Nat) ()) (inst (test test Nat) ())))
  ))
  (def Nat.is_zero ()
    (pi n ex (inst (test test Nat) ())
      (inst (test test Bool) ()))
    (ap (ap (ap
      (inst (test test Nat.rec) ((univsucc (univzero))))
      (lam n ex
        (inst (test test Nat) ())
        (inst (test test Bool) ())))
      (inst (test test true) ()))
      (lam k ex
        (inst (test test Nat) ())
        (lam hk ex
          (inst (test test Bool) ())
          (inst (test test false) ()))))
  )
  (def Nat.zero_is_zero ()
    (ap (ap (ap
      (inst (test test Eq) ((univsucc (univzero))))
      (inst (test test Bool) ()))
      (ap (inst (test test Nat.is_zero) ())
        (inst (test test Nat.zero) ())))
      (inst (test test true) ()))
    (ap (ap (inst (test test Eq.refl) ((univsucc (univzero))))
      (inst (test test Bool) ()))
      (ap (inst (test test Nat.is_zero) ())
        (inst (test test Nat.zero) ())))
  )
)
