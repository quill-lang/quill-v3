id: {A: Sort::{u}} -> A -> A = fn {A} a => a

S: {A: Sort::{u}} -> {B: Sort::{v}} -> {C: Sort::{w}} ->
        (A -> B -> C) -> (A -> B) ->
        (A) -> C =
    fn {A} {B} {C} x y z => (x z) (y z)

K: {A: Sort::{u}} -> {B: Sort::{v}} -> A -> B -> A = fn {A} {B} a b => a

I: {A: Sort::{u}} -> A -> A = fn {A} a => K a a

B: {A: Sort::{u}} -> {B: Sort::{v}} -> {C: Sort::{w}} ->
    (B -> C) -> (A -> B) -> A -> C = fn {A} {B} {C} => S (K S) K

C: {A: Sort::{u}} -> {B: Sort::{v}} -> {C: Sort::{w}} ->
    (A -> B -> C) -> B -> A -> C = fn {A} {B} {C} => S (S (K (S (K S) K)) S) (K K)

W: {A: Sort::{u}} -> {B: Sort::{v}} ->
    (A -> A -> B) -> A -> B = fn {A} {B} => S S (S K)

let_test: {A: Sort::{u}} -> A -> A =
    fn {A} a => let
        b = a
        c = b
    c

use_id: {A: Sort::{u}} -> A -> A = fn {A} a => id (id a)

borrow_deref: {A: Type::{u}} -> A -> A = fn {A} a => *&a

True: Prop = inductive
    intro

False: Prop = inductive

Bool: Type = inductive
    true
    false

Eq: {A: Sort::{u}} -> A -> A -> Prop =
    fn {A} a => inductive
        refl -> Eq a a

HEq: {A: Sort::{u}} -> A -> {B: Sort::{u}} -> B -> Prop =
    fn {A} a => inductive
        refl -> HEq a a

Prod: {A: Type::{u}} -> {B: Type::{u}} -> Type::{u} =
    fn {A} {B} => inductive
        intro {
            fst: A
            snd: B
        }

Sum: {A: Type::{u}} -> {B: Type::{u}} -> Type::{u} =
    fn {A} {B} => inductive
        inl {
            value: A
        }
        inr {
            value: B
        }

Subtype: {A: Type::{u}} -> (p: A -> Prop) -> Type::{u} =
    fn {A} p => inductive
        intro {
            value: A
            property: p value
        }

Not: Prop -> Prop = fn p => p -> false

Decidable: Prop -> Type = fn p => inductive
    false {
        proof: Not p
    }
    true {
        proof: p
    }

Nat: Type = inductive
    zero
    succ {
        value: Nat
    }

List: (A: Type::{u}) -> Type::{u} =
    fn A => inductive
        nil
        cons {
            value: A
            tail: List A
        }

zero: Nat = Nat::zero {}
succ: Nat -> Nat = fn value => Nat::succ {
    value = value
}

one = succ zero
two = succ one
four = succ (succ two)

is_zero: Nat -> Bool = fn n =>
    match n with
        zero => Bool::true {}
        succ {
            value
        } => Bool::false {}

eq_symm: {A: Sort::{u}} -> {a: A} -> {b: A} -> Eq a b -> Eq b a =
    fn A a b h => match h return [x] Eq x a with
        refl => Eq::refl {}

pred: Nat -> Nat = fn n =>
    match n with
        zero => zero
        succ {
            value = prececessor
        } => prececessor

add: Nat -> Nat -> Nat = fn a b =>
    fix f b with x => match x with
        zero => a
        succ {
            value
        } => succ {
            value = f value
        }

two_plus_two_eq_four: Eq (add two two) four = Eq::refl {}
