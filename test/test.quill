fn a {f: {erased A: Type} -> B -> (owned C) -> D a b -> [E] -> F} [b] => b

def id::{u} : forall (A : Sort u), forall (a : A), A =
    fn (A : Sort u), fn (a : A), a

def S_combinator::{u v w} :
forall (A : Sort u), forall (B : Sort v), forall (C : Sort w),
forall (z : forall (a : A), forall (b : B), C), forall (y : forall (a : A), B), forall (z : A), C =
    fn (A : Sort u), fn (B : Sort v), fn (C : Sort w),
    fn (x : forall (a : A), forall (b : B), C), fn (y : forall (a : A), B), fn (z : A), (x z) (y z)

def K_combinator::{u v} :
forall (A : Sort u), forall (B : Sort v), forall (a : A), forall (b : B), A =
    fn (A : Sort u), fn (B : Sort v), fn (a : A), fn (b : B), a

def I_combinator::{u} :
forall (A : Sort u), forall (a : A), A =
    fn (A : Sort u), fn (a : A), K_combinator::{u u} A A a a
