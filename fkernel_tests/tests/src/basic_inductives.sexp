(module ()
  (ind Punit () (u) (sort (univvar u)) 0 (
    (star (inst (basic_inductives Punit) ((univvar u))))
  ))
  (ind True () () (sort (univzero)) 0 (
    (True.intro (inst (basic_inductives True) ()))
  ))
  (ind False () () (sort (univzero)) 0 ())
  (ind Empty () () (sort (univsucc (univzero))) 0 ())
  (ind Eq () (u)
    (pi A imp (sort (univvar u))
      (pi a ex (bound 0)
        (pi b ex (bound 1)
          (sort (univzero)))))
    2 (
    (Eq.refl (pi A imp (sort (univvar u))
      (pi a ex (bound 0)
        (ap (ap (ap (inst (basic_inductives Eq) ((univvar u)))
          (bound 1))
          (bound 0))
          (bound 0)))
    ))
  ))
  (ind Heq () (u)
    (pi A imp (sort (univvar u))
      (pi a ex (bound 0)
        (pi B imp (sort (univvar u))
          (pi b ex (bound 0)
            (sort (univzero))))))
    2 (
    (Heq.refl (pi A imp (sort (univvar u))
      (pi a ex (bound 0)
        (ap (ap (ap (ap (inst (basic_inductives Heq) ((univvar u)))
          (bound 1))
          (bound 0))
          (bound 1))
          (bound 0)))
    ))
  ))
)
