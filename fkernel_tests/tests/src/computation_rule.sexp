(module ()
  (ind Eq () (u)
    (pi A imp (sort (univvar u))
      (pi a ex (bound 0)
        (pi b ex (bound 1)
          (sort (univzero)))))
    2 (
    (Eq.refl (pi A imp (sort (univvar u))
      (pi a ex (bound 0)
        (ap (ap (ap (inst (computation_rule Eq) ((univvar u)))
          (bound 1))
          (bound 0))
          (bound 0)))
    ))
  ))
  (ind Bool () ()
    (sort (univsucc (univzero)))
    0 (
    (false (inst (computation_rule Bool) ()))
    (true (inst (computation_rule Bool) ()))
  ))
  (ind Nat () ()
    (sort (univsucc (univzero)))
    0 (
    (Nat.zero (inst (computation_rule Nat) ()))
    (Nat.succ (pi k ex (inst (computation_rule Nat) ()) (inst (computation_rule Nat) ())))
  ))
  (def Nat.is_zero ()
    (pi n ex (inst (computation_rule Nat) ())
      (inst (computation_rule Bool) ()))
    (ap (ap (ap
      (inst (computation_rule Nat.rec) ((univsucc (univzero))))
      (lam n ex
        (inst (computation_rule Nat) ())
        (inst (computation_rule Bool) ())))
      (inst (computation_rule true) ()))
      (lam k ex
        (inst (computation_rule Nat) ())
        (lam hk ex
          (inst (computation_rule Bool) ())
          (inst (computation_rule false) ()))))
  )
  (def Nat.zero_is_zero ()
    (ap (ap (ap
      (inst (computation_rule Eq) ((univsucc (univzero))))
      (inst (computation_rule Bool) ()))
      (ap (inst (computation_rule Nat.is_zero) ())
        (inst (computation_rule Nat.zero) ())))
      (inst (computation_rule true) ()))
    (ap (ap (inst (computation_rule Eq.refl) ((univsucc (univzero))))
      (inst (computation_rule Bool) ()))
      (ap (inst (computation_rule Nat.is_zero) ())
        (inst (computation_rule Nat.zero) ())))
  )
)
