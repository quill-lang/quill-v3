use std::path::PathBuf;

use fcommon::{Path, Source, SourceType, Str};
use qdb::QuillDatabase;

// Include the tests automatically generated by the build script.
include!(concat!(env!("OUT_DIR"), "/tests.rs"));

fn run_test(file: &str) {
    let (db, _rx) = QuillDatabase::new(PathBuf::from("tests/src"));

    let source = Source::new(
        &db,
        Path::new(
            &db,
            file.split('/')
                .map(|segment| Str::new(&db, segment.to_owned()))
                .collect(),
        ),
        SourceType::Feather,
    );

    let result = fexpr::queries::module_from_feather_source(&db, source);
    for report in result.reports() {
        report.render(&db, std::io::stdout());
    }

    assert!(result.reports().is_empty());

    if let Some(result) = result.value() {
        for def in &result.items {
            if let fexpr::module::Item::Definition(def) = def {
                let result = fkernel::typeck::certify_definition(
                    &db,
                    Path::new(&db, {
                        let mut segments = source.path(&db).segments(&db).clone();
                        segments.push(*def.name);
                        segments
                    }),
                );

                assert!(result.reports().is_empty());
            }
        }
    }
}
