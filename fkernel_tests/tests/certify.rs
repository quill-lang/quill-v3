use std::{path::PathBuf, sync::Arc};

use fcommon::{FileReader, Intern, PathData, Source, SourceType};
use qdb::QuillDatabase;
use salsa::Durability;

// Include the tests automatically generated by the build script.
include!(concat!(env!("OUT_DIR"), "/tests.rs"));

fn run_test(file: &str) {
    let (mut db, _rx) = QuillDatabase::new();
    db.set_project_root_with_durability(Arc::new(PathBuf::from("tests/src")), Durability::HIGH);

    let source = Source {
        path: db.intern_path_data(PathData(
            file.split('/')
                .map(|segment| db.intern_string_data(segment.to_string()))
                .collect(),
        )),
        ty: SourceType::Feather,
    };

    let result = db.source(source);
    for report in result.reports() {
        report.render(&db, std::io::stdout());
    }
    assert!(result.reports().is_empty());
}
